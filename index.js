// Generated by CoffeeScript 1.8.0
(function() {
  var ret, shortid;

  shortid = require('shortid');

  ret = function(window, $) {
    var id, last_cb, last_hash;
    id = null;
    last_cb = null;
    last_hash = document.location.hash;
    $.postMessage = function(message, target_url, target) {
      if (target == null) {
        target = window.parent;
      }
      if (!target_url) {
        return;
      }
      if (typeof message !== 'string') {
        message = $.param(message);
      }
      if (window.postMessage) {
        return target.postMessage(message, target_url.replace(/([^:]+:\/\/[^\/]+).*/, '$1'));
      } else {
        return target.location = target_url.replace(/#.*$/, "#" + (shortid.generate()) + "&" + message);
      }
    };
    return $.receiveMessage = function(callback, source_origin, delay) {
      var bind, cb, unbind;
      if (source_origin == null) {
        source_origin = null;
      }
      if (delay == null) {
        delay = 100;
      }
      bind = function(cb) {
        var hashChange;
        if (cb) {
          last_cb = cb;
          if (window.postMessage) {
            if (window.addEventListener) {
              return window.addEventListener('message', cb);
            } else {
              return window.attachEvent('onmessage', cb);
            }
          } else {
            hashChange = function() {
              var hash, re;
              hash = document.location.hash;
              re = /^#?\d+&/;
              if (hash !== last_hash && re.test(hash)) {
                last_hash = hash;
                return cb({
                  data: hash.replace(re, '')
                });
              }
            };
            return id = setInterval(hashChange, delay);
          }
        }
      };
      unbind = function() {
        if (last_cb) {
          if (window.postMessage) {
            if (window.removeEventListener) {
              return window.removeEventListener('message', last_cb);
            } else {
              return window.detachEvent('onmessage', last_cb);
            }
          } else {
            if (id) {
              return clearInterval(id);
            }
          }
        }
      };
      if (callback) {
        cb = function(e) {
          if ((typeof source_origin === 'string' && e.origin !== source_origin) || ($.isFunction(source_origin) && source_origin(e.origin) === false)) {
            return false;
          } else {
            return callback(e);
          }
        };
        unbind();
        return bind(cb);
      } else {
        return unbind();
      }
    };
  };

  ret(window, window.$);

}).call(this);
